	.section	__TEXT,__text,regular,pure_instructions
	.build_version macos, 13, 0	sdk_version 13, 3
	.globl	_main                           ; -- Begin function main
	.p2align	2
_main:                                  ; @main
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	wzr, [x29, #-4]
	bl	_setDoomsDay
	b	LBB0_1
LBB0_1:                                 ; =>This Inner Loop Header: Depth=1
	adrp	x0, l_.str@PAGE
	add	x0, x0, l_.str@PAGEOFF
	bl	_printf
	mov	x9, sp
	sub	x8, x29, #8
	str	x8, [x9]
	adrp	x0, l_.str.1@PAGE
	add	x0, x0, l_.str.1@PAGEOFF
	bl	_scanf
	ldur	w8, [x29, #-8]
	adds	w8, w8, #1
	cset	w8, ne
	tbnz	w8, #0, LBB0_3
	b	LBB0_2
LBB0_2:
	mov	w0, #0
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	ret
LBB0_3:                                 ;   in Loop: Header=BB0_1 Depth=1
	adrp	x0, l_.str.2@PAGE
	add	x0, x0, l_.str.2@PAGEOFF
	bl	_printf
	mov	x9, sp
	sub	x8, x29, #12
	str	x8, [x9]
	adrp	x0, l_.str.1@PAGE
	add	x0, x0, l_.str.1@PAGEOFF
	str	x0, [sp, #16]                   ; 8-byte Folded Spill
	bl	_scanf
	adrp	x0, l_.str.3@PAGE
	add	x0, x0, l_.str.3@PAGEOFF
	bl	_printf
	ldr	x0, [sp, #16]                   ; 8-byte Folded Reload
	mov	x9, sp
	sub	x8, x29, #16
	str	x8, [x9]
	bl	_scanf
	ldur	w0, [x29, #-8]
	ldur	w1, [x29, #-12]
	ldur	w2, [x29, #-16]
	bl	_getDayOfWeek
	stur	w0, [x29, #-20]
	ldur	w0, [x29, #-20]
	bl	_printDay
	b	LBB0_1
	.cfi_endproc
                                        ; -- End function
	.globl	_getDayOfWeek                   ; -- Begin function getDayOfWeek
	.p2align	2
_getDayOfWeek:                          ; @getDayOfWeek
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	stp	x29, x30, [sp, #48]             ; 16-byte Folded Spill
	add	x29, sp, #48
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	w0, [x29, #-8]
	stur	w1, [x29, #-12]
	stur	w2, [x29, #-16]
	ldur	w8, [x29, #-8]
	subs	w8, w8, #1
	cset	w8, lt
	and	w8, w8, #0x1
	ldur	w9, [x29, #-8]
	subs	w9, w9, #2999
	cset	w9, gt
	and	w9, w9, #0x1
	orr	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB1_2
	b	LBB1_1
LBB1_1:
	stur	wzr, [x29, #-4]
	b	LBB1_19
LBB1_2:
	ldursw	x9, [x29, #-8]
	adrp	x8, _yearDoomsDayArr@GOTPAGE
	ldr	x8, [x8, _yearDoomsDayArr@GOTPAGEOFF]
	ldrsh	w8, [x8, x9, lsl #1]
	stur	w8, [x29, #-20]
	mov	w8, #-1
	str	w8, [sp, #24]
	ldur	w8, [x29, #-12]
	subs	w8, w8, #1
                                        ; kill: def $x8 killed $w8
	str	x8, [sp, #8]                    ; 8-byte Folded Spill
	subs	x8, x8, #11
	cset	w8, hi
	tbnz	w8, #0, LBB1_16
; %bb.3:
	ldr	x11, [sp, #8]                   ; 8-byte Folded Reload
	adrp	x10, lJTI1_0@PAGE
	add	x10, x10, lJTI1_0@PAGEOFF
Ltmp0:
	adr	x8, Ltmp0
	ldrsw	x9, [x10, x11, lsl #2]
	add	x8, x8, x9
	br	x8
LBB1_4:
	ldur	w0, [x29, #-8]
	bl	_isLeapYear
	subs	w8, w0, #0
	cset	w8, ne
	and	w10, w8, #0x1
	mov	w9, #24
	mov	w8, #25
	ands	w10, w10, #0x1
	csel	w8, w8, w9, ne
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_5:
	ldur	w8, [x29, #-20]
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_6:
	mov	w8, #7
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_7:
	mov	w8, #4
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_8:
	mov	w8, #9
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_9:
	mov	w8, #6
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_10:
	mov	w8, #11
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_11:
	mov	w8, #8
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_12:
	mov	w8, #5
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_13:
	mov	w8, #10
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_14:
	mov	w8, #7
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_15:
	mov	w8, #12
	str	w8, [sp, #24]
	b	LBB1_16
LBB1_16:
	ldur	w8, [x29, #-16]
	ldr	w9, [sp, #24]
	subs	w8, w8, w9
	cset	w8, le
	tbnz	w8, #0, LBB1_18
	b	LBB1_17
LBB1_17:
	ldur	w8, [x29, #-16]
	ldr	w9, [sp, #24]
	subs	w8, w8, w9
	mov	w10, #7
	sdiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	str	w8, [sp, #20]
	ldur	w8, [x29, #-20]
	ldr	w9, [sp, #20]
	add	w8, w8, w9
	sdiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	stur	w8, [x29, #-4]
	b	LBB1_19
LBB1_18:
	ldr	w8, [sp, #24]
	ldur	w9, [x29, #-16]
	subs	w8, w8, w9
	mov	w10, #7
	sdiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	str	w8, [sp, #16]
	ldur	w8, [x29, #-20]
	ldr	w9, [sp, #16]
	subs	w9, w10, w9
	add	w8, w8, w9
	sdiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	stur	w8, [x29, #-4]
	b	LBB1_19
LBB1_19:
	ldur	w0, [x29, #-4]
	ldp	x29, x30, [sp, #48]             ; 16-byte Folded Reload
	add	sp, sp, #64
	ret
	.cfi_endproc
	.p2align	2
lJTI1_0:
	.long	LBB1_4-Ltmp0
	.long	LBB1_5-Ltmp0
	.long	LBB1_6-Ltmp0
	.long	LBB1_7-Ltmp0
	.long	LBB1_8-Ltmp0
	.long	LBB1_9-Ltmp0
	.long	LBB1_10-Ltmp0
	.long	LBB1_11-Ltmp0
	.long	LBB1_12-Ltmp0
	.long	LBB1_13-Ltmp0
	.long	LBB1_14-Ltmp0
	.long	LBB1_15-Ltmp0
                                        ; -- End function
	.globl	_printDay                       ; -- Begin function printDay
	.p2align	2
_printDay:                              ; @printDay
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	stur	w0, [x29, #-4]
	adrp	x0, l_.str.4@PAGE
	add	x0, x0, l_.str.4@PAGEOFF
	bl	_printf
	adrp	x0, l_.str.5@PAGE
	add	x0, x0, l_.str.5@PAGEOFF
	bl	_printf
	ldur	w8, [x29, #-4]
	subs	w8, w8, #0
                                        ; kill: def $x8 killed $w8
	str	x8, [sp]                        ; 8-byte Folded Spill
	subs	x8, x8, #6
	cset	w8, hi
	tbnz	w8, #0, LBB2_9
; %bb.1:
	ldr	x11, [sp]                       ; 8-byte Folded Reload
	adrp	x10, lJTI2_0@PAGE
	add	x10, x10, lJTI2_0@PAGEOFF
Ltmp1:
	adr	x8, Ltmp1
	ldrsw	x9, [x10, x11, lsl #2]
	add	x8, x8, x9
	br	x8
LBB2_2:
	adrp	x0, l_.str.6@PAGE
	add	x0, x0, l_.str.6@PAGEOFF
	bl	_printf
	b	LBB2_9
LBB2_3:
	adrp	x0, l_.str.7@PAGE
	add	x0, x0, l_.str.7@PAGEOFF
	bl	_printf
	b	LBB2_9
LBB2_4:
	adrp	x0, l_.str.8@PAGE
	add	x0, x0, l_.str.8@PAGEOFF
	bl	_printf
	b	LBB2_9
LBB2_5:
	adrp	x0, l_.str.9@PAGE
	add	x0, x0, l_.str.9@PAGEOFF
	bl	_printf
	b	LBB2_9
LBB2_6:
	adrp	x0, l_.str.10@PAGE
	add	x0, x0, l_.str.10@PAGEOFF
	bl	_printf
	b	LBB2_9
LBB2_7:
	adrp	x0, l_.str.11@PAGE
	add	x0, x0, l_.str.11@PAGEOFF
	bl	_printf
	b	LBB2_9
LBB2_8:
	adrp	x0, l_.str.12@PAGE
	add	x0, x0, l_.str.12@PAGEOFF
	bl	_printf
	b	LBB2_9
LBB2_9:
	adrp	x0, l_.str.4@PAGE
	add	x0, x0, l_.str.4@PAGEOFF
	bl	_printf
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	ret
	.cfi_endproc
	.p2align	2
lJTI2_0:
	.long	LBB2_2-Ltmp1
	.long	LBB2_3-Ltmp1
	.long	LBB2_4-Ltmp1
	.long	LBB2_5-Ltmp1
	.long	LBB2_6-Ltmp1
	.long	LBB2_7-Ltmp1
	.long	LBB2_8-Ltmp1
                                        ; -- End function
	.globl	_isLeapYear                     ; -- Begin function isLeapYear
	.p2align	2
_isLeapYear:                            ; @isLeapYear
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, #8]
	ldr	w8, [sp, #8]
	mov	w10, #4
	sdiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB3_5
	b	LBB3_1
LBB3_1:
	ldr	w8, [sp, #8]
	mov	w10, #100
	sdiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, ne
	tbnz	w8, #0, LBB3_4
	b	LBB3_2
LBB3_2:
	ldr	w8, [sp, #8]
	mov	w10, #400
	sdiv	w9, w8, w10
	mul	w9, w9, w10
	subs	w8, w8, w9
	subs	w8, w8, #0
	cset	w8, eq
	tbnz	w8, #0, LBB3_4
	b	LBB3_3
LBB3_3:
	str	wzr, [sp, #12]
	b	LBB3_6
LBB3_4:
	mov	w8, #1
	str	w8, [sp, #12]
	b	LBB3_6
LBB3_5:
	str	wzr, [sp, #12]
	b	LBB3_6
LBB3_6:
	ldr	w0, [sp, #12]
	add	sp, sp, #16
	ret
	.cfi_endproc
                                        ; -- End function
	.globl	_setDoomsDay                    ; -- Begin function setDoomsDay
	.p2align	2
_setDoomsDay:                           ; @setDoomsDay
	.cfi_startproc
; %bb.0:
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	stp	x29, x30, [sp, #16]             ; 16-byte Folded Spill
	add	x29, sp, #16
	.cfi_def_cfa w29, 16
	.cfi_offset w30, -8
	.cfi_offset w29, -16
	adrp	x9, _yearDoomsDayArr@GOTPAGE
	ldr	x9, [x9, _yearDoomsDayArr@GOTPAGEOFF]
	str	x9, [sp]                        ; 8-byte Folded Spill
	mov	w8, #1
	strh	w8, [x9, #4000]
	mov	w8, #2001
	stur	w8, [x29, #-4]
	b	LBB4_1
LBB4_1:                                 ; =>This Inner Loop Header: Depth=1
	ldursw	x8, [x29, #-4]
	mov	x9, #6000
	subs	x8, x8, x9
	cset	w8, hs
	tbnz	w8, #0, LBB4_7
	b	LBB4_2
LBB4_2:                                 ;   in Loop: Header=BB4_1 Depth=1
	ldur	w0, [x29, #-4]
	bl	_isLeapYear
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB4_4
	b	LBB4_3
LBB4_3:                                 ;   in Loop: Header=BB4_1 Depth=1
	ldr	x9, [sp]                        ; 8-byte Folded Reload
	ldur	w8, [x29, #-4]
	subs	w8, w8, #1
	ldrsh	w8, [x9, w8, sxtw #1]
	add	w8, w8, #2
	mov	w11, #7
	sdiv	w10, w8, w11
	mul	w10, w10, w11
	subs	w8, w8, w10
	ldursw	x10, [x29, #-4]
	strh	w8, [x9, x10, lsl #1]
	b	LBB4_5
LBB4_4:                                 ;   in Loop: Header=BB4_1 Depth=1
	ldr	x9, [sp]                        ; 8-byte Folded Reload
	ldur	w8, [x29, #-4]
	subs	w8, w8, #1
	ldrsh	w8, [x9, w8, sxtw #1]
	add	w8, w8, #1
	mov	w11, #7
	sdiv	w10, w8, w11
	mul	w10, w10, w11
	subs	w8, w8, w10
	ldursw	x10, [x29, #-4]
	strh	w8, [x9, x10, lsl #1]
	b	LBB4_5
LBB4_5:                                 ;   in Loop: Header=BB4_1 Depth=1
	b	LBB4_6
LBB4_6:                                 ;   in Loop: Header=BB4_1 Depth=1
	ldur	w8, [x29, #-4]
	add	w8, w8, #1
	stur	w8, [x29, #-4]
	b	LBB4_1
LBB4_7:
	mov	w8, #1999
	str	w8, [sp, #8]
	b	LBB4_8
LBB4_8:                                 ; =>This Inner Loop Header: Depth=1
	ldr	w8, [sp, #8]
	subs	w8, w8, #0
	cset	w8, le
	tbnz	w8, #0, LBB4_14
	b	LBB4_9
LBB4_9:                                 ;   in Loop: Header=BB4_8 Depth=1
	ldr	w8, [sp, #8]
	add	w0, w8, #1
	bl	_isLeapYear
	subs	w8, w0, #0
	cset	w8, eq
	tbnz	w8, #0, LBB4_11
	b	LBB4_10
LBB4_10:                                ;   in Loop: Header=BB4_8 Depth=1
	ldr	x9, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [sp, #8]
	add	w8, w8, #1
	ldrsh	w8, [x9, w8, sxtw #1]
	add	w8, w8, #5
	mov	w11, #7
	sdiv	w10, w8, w11
	mul	w10, w10, w11
	subs	w8, w8, w10
	ldrsw	x10, [sp, #8]
	strh	w8, [x9, x10, lsl #1]
	b	LBB4_12
LBB4_11:                                ;   in Loop: Header=BB4_8 Depth=1
	ldr	x9, [sp]                        ; 8-byte Folded Reload
	ldr	w8, [sp, #8]
	add	w8, w8, #1
	ldrsh	w8, [x9, w8, sxtw #1]
	add	w8, w8, #6
	mov	w11, #7
	sdiv	w10, w8, w11
	mul	w10, w10, w11
	subs	w8, w8, w10
	ldrsw	x10, [sp, #8]
	strh	w8, [x9, x10, lsl #1]
	b	LBB4_12
LBB4_12:                                ;   in Loop: Header=BB4_8 Depth=1
	b	LBB4_13
LBB4_13:                                ;   in Loop: Header=BB4_8 Depth=1
	ldr	w8, [sp, #8]
	subs	w8, w8, #1
	str	w8, [sp, #8]
	b	LBB4_8
LBB4_14:
	ldp	x29, x30, [sp, #16]             ; 16-byte Folded Reload
	add	sp, sp, #32
	ret
	.cfi_endproc
                                        ; -- End function
	.section	__TEXT,__cstring,cstring_literals
l_.str:                                 ; @.str
	.asciz	"\353\205\204 \354\236\205\353\240\245(1~2999), exit: -1\n"

l_.str.1:                               ; @.str.1
	.asciz	"%d"

l_.str.2:                               ; @.str.2
	.asciz	"\354\233\224 \354\236\205\353\240\245\n"

l_.str.3:                               ; @.str.3
	.asciz	"\354\235\274 \354\236\205\353\240\245\n"

	.comm	_yearDoomsDayArr,6000,1         ; @yearDoomsDayArr
l_.str.4:                               ; @.str.4
	.asciz	"=====\n"

l_.str.5:                               ; @.str.5
	.asciz	"dayOfWeek : "

l_.str.6:                               ; @.str.6
	.asciz	"MON\n"

l_.str.7:                               ; @.str.7
	.asciz	"TUE\n"

l_.str.8:                               ; @.str.8
	.asciz	"WED\n"

l_.str.9:                               ; @.str.9
	.asciz	"THU\n"

l_.str.10:                              ; @.str.10
	.asciz	"FRI\n"

l_.str.11:                              ; @.str.11
	.asciz	"SAT\n"

l_.str.12:                              ; @.str.12
	.asciz	"SUN\n"

.subsections_via_symbols
